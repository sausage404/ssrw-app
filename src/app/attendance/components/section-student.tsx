"use client"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Auth } from "@/lib/session"
import React from "react"
import { AttendanceResponse, getAttendanceTodayWithUserId, getLeaves, recordAttendance } from "../utils"
import attendance from "@/schema/attendance"
import { Button } from "@/components/ui/button"
import { toast } from "sonner"
import DialogLeave from "./dialog-leave"
import { Leave } from "@prisma/client"

export default ({ auth }: Readonly<{ auth: Auth }>) => {

    const [today, setToday] = React.useState<AttendanceResponse | null>(null);
    const [isChecking, setIsChecking] = React.useState(false);
    const [leaves, setLeaves] = React.useState<Leave[]>([]);

    React.useEffect(() => {
        (async () => {
            const attendance = await getAttendanceTodayWithUserId(auth.id)
            setToday(attendance)
            const leaves = await getLeaves(auth.id, new Date());
            setLeaves(leaves);
        })()
    }, []);

    const isCheckIn = today ? today.period[0] === "present" : false

    type Geolocation = {
        latitude: number;
        longitude: number;
    };

    const corner1 = { latitude: 17.273284461337628, longitude: 101.13647699052383 };
    const corner2 = { latitude: 17.273079856189753, longitude: 101.13712881842254 };

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏à‡∏∏‡∏î 2 ‡∏à‡∏∏‡∏î (Haversine formula)
    function calculateDistance(point1: Geolocation, point2: Geolocation): number {
        const R = 6371e3; // ‡∏£‡∏±‡∏®‡∏°‡∏µ‡πÇ‡∏•‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏°‡∏ï‡∏£
        const œÜ1 = point1.latitude * Math.PI / 180;
        const œÜ2 = point2.latitude * Math.PI / 180;
        const ŒîœÜ = (point2.latitude - point1.latitude) * Math.PI / 180;
        const ŒîŒª = (point2.longitude - point1.longitude) * Math.PI / 180;

        const a = Math.sin(ŒîœÜ / 2) * Math.sin(ŒîœÜ / 2) +
            Math.cos(œÜ1) * Math.cos(œÜ2) *
            Math.sin(ŒîŒª / 2) * Math.sin(ŒîŒª / 2);
        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));

        return R * c; // ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏°‡∏ï‡∏£
    }

    // ‡∏´‡∏≤‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏ö‡∏ô‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°
    function getClosestPointOnRectangle(corner1: Geolocation, corner2: Geolocation, point: Geolocation): Geolocation {
        const minLat = Math.min(corner1.latitude, corner2.latitude);
        const maxLat = Math.max(corner1.latitude, corner2.latitude);
        const minLng = Math.min(corner1.longitude, corner2.longitude);
        const maxLng = Math.max(corner1.longitude, corner2.longitude);

        const clampedLat = Math.max(minLat, Math.min(maxLat, point.latitude));
        const clampedLng = Math.max(minLng, Math.min(maxLng, point.longitude));

        return { latitude: clampedLat, longitude: clampedLng };
    }

    function isInSchoolArea(
        corner1: Geolocation,
        corner2: Geolocation,
        point: Geolocation,
        allowedDistanceMeters: number = 15
    ): {
        inArea: boolean;
        distance: number;
        direction: string;
        details: string;
        preciseLocation: string;
    } {
        const minLat = Math.min(corner1.latitude, corner2.latitude);
        const maxLat = Math.max(corner1.latitude, corner2.latitude);
        const minLng = Math.min(corner1.longitude, corner2.longitude);
        const maxLng = Math.max(corner1.longitude, corner2.longitude);

        const inRectangle = (
            point.latitude >= minLat &&
            point.latitude <= maxLat &&
            point.longitude >= minLng &&
            point.longitude <= maxLng
        );

        if (inRectangle) {
            const centerPoint = {
                latitude: (minLat + maxLat) / 2,
                longitude: (minLng + maxLng) / 2
            };
            const distanceFromCenter = calculateDistance(point, centerPoint);

            return {
                inArea: true,
                distance: 0,
                direction: "‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô",
                details: `‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏à‡∏∏‡∏î‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á ${distanceFromCenter < 1 ? `${Math.round(distanceFromCenter * 100)} ‡∏ã‡∏°.` : `${distanceFromCenter.toFixed(2)} ‡∏°.`} ‚úÖ`,
                preciseLocation: `‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥: ${point.latitude.toFixed(7)}, ${point.longitude.toFixed(7)}`
            };
        }

        const closestPoint = getClosestPointOnRectangle(corner1, corner2, point);
        const distance = calculateDistance(point, closestPoint);

        let direction = "";
        if (point.latitude < minLat) direction += "‡πÄ‡∏´‡∏ô‡∏∑‡∏≠";
        if (point.latitude > maxLat) direction += "‡πÉ‡∏ï‡πâ";
        if (point.longitude < minLng) direction += "‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å";
        if (point.longitude > maxLng) direction += "‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏ï‡∏Å";

        const latDiff = point.latitude - closestPoint.latitude;
        const lngDiff = point.longitude - closestPoint.longitude;

        const latDistanceM = latDiff * 111000;
        const lngDistanceM = lngDiff * 111000 * Math.cos(point.latitude * Math.PI / 180);

        const inArea = distance <= allowedDistanceMeters;

        const formatDistance = (dist: number): string => {
            if (dist < 1) return `${Math.round(dist * 100)} ‡∏ã‡∏°.`;
            if (dist < 10) return `${dist.toFixed(2)} ‡∏°.`;
            return `${Math.round(dist)} ‡∏°.`;
        };

        const details = inArea
            ? `‡∏≠‡∏¢‡∏π‡πà‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡∏≠‡∏ö‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ${formatDistance(distance)} (‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ) üü°`
            : `‡∏≠‡∏¢‡∏π‡πà‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡∏≠‡∏ö‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ${formatDistance(distance)} ‡∏ó‡∏≤‡∏á${direction} (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡∏≠‡∏µ‡∏Å ${formatDistance(distance - allowedDistanceMeters)}) ‚ùå`;

        return {
            inArea,
            distance,
            direction,
            details,
            preciseLocation: `‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥: ${point.latitude.toFixed(7)}, ${point.longitude.toFixed(7)} | ‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î: ${latDistanceM > 0 ? '+' : ''}${latDistanceM.toFixed(2)}‡∏°. ‡∏•‡∏≠‡∏á‡∏ï‡∏¥‡∏à‡∏π‡∏î: ${lngDistanceM > 0 ? '+' : ''}${lngDistanceM.toFixed(2)}‡∏°.`
        };
    }

    const checkIn = async () => {
        if (isCheckIn) {
            return toast.error('‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
        }

        if (isChecking) return;

        setIsChecking(true);

        if (!navigator.geolocation) {
            toast.error("‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á");
            setIsChecking(false);
            return;
        }

        navigator.geolocation.getCurrentPosition(
            async (position) => {
                const accuracyM = position.coords.accuracy;
                // if (accq

                const me = {
                    latitude: position.coords.latitude,
                    longitude: position.coords.longitude,
                };

                console.log('‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:', me);
                console.log('‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô:', { corner1, corner2 });
                console.log('‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ GPS:', `${Math.round(position.coords.accuracy * 100)} ‡∏ã‡∏°.`);
                console.log('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°:', {
                    altitude: position.coords.altitude ? `${position.coords.altitude.toFixed(2)} ‡∏°.` : '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö',
                    heading: position.coords.heading ? `${position.coords.heading}¬∞` : '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö',
                    speed: position.coords.speed ? `${position.coords.speed.toFixed(2)} ‡∏°./‡∏ß‡∏¥` : '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö'
                });

                const result = isInSchoolArea(corner1, corner2, me);

                console.log('‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:', result);
                console.log('‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:', result.preciseLocation);

                if (!result.inArea) {
                    toast.success(`‡πÄ‡∏Ç‡πâ‡∏≤‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢! ${result.details}`);
                    setTimeout(() => {
                        toast.info(`üìç ${result.preciseLocation}`, { duration: 5000 });
                    }, 1000);
                    await recordAttendance(
                        today?.id,
                        today ? today.period.map((p, i) => i === 0 ? "present" : p) :
                            ["present", "null", "null", "null", "null", "null", "null", "null", "null", "null"],
                        auth.id
                    );
                    setToday(pre => {
                        if (!pre) return null;
                        return {
                            ...pre,
                            period: pre.period.map((p, i) => i === 0 ? "present" : p)
                        }
                    })
                } else {
                    toast.error(result.details);
                    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
                    setTimeout(() => {
                        toast.info(`üìç ${result.preciseLocation}`, { duration: 6000 });
                    }, 1500);
                    setTimeout(() => {
                        toast.info(`üö∂‚Äç‚ôÇÔ∏è ‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á${result.direction} ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì ${result.distance < 1 ? `${Math.round(result.distance * 100)} ‡∏ã‡∏°.` : `${result.distance.toFixed(2)} ‡∏°.`}`);
                    }, 3000);
                }

                setIsChecking(false);
            },
            (err) => {
                // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
                switch (err.code) {
                    case err.PERMISSION_DENIED:
                        toast.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á");
                        break;
                    case err.POSITION_UNAVAILABLE:
                        toast.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏î‡πâ");
                        break;
                    case err.TIMEOUT:
                        toast.error("‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á");
                        break;
                    default:
                        toast.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á");
                }
                setIsChecking(false);
            },
            {
                enableHighAccuracy: true,
                timeout: 10000,
                maximumAge: 0
            }
        );
    };


    return (
        <React.Fragment>
            <div className="border-b border-dashed">
                <div className="flex sm:flex-row sm:justify-between justify-center px-2 py-2 gap-4">
                    <div className="flex items-center gap-2 sm:text-start">
                        ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏û‡∏§‡∏ï‡∏¥ {auth.behaviorPoint}
                    </div>
                    <div className="grid sm:grid-cols-2 gap-2">
                        <Button onClick={checkIn} disabled={isChecking || isCheckIn} variant="outline" size="sm" className="w-full sm:w-auto">
                            {!isCheckIn ? isChecking ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö..." : "‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô" : "‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢"}
                        </Button>
                        <DialogLeave auth={auth} />
                    </div>
                </div>
            </div>
            <div className="border-b border-dashed gap-4 text-sm">
                <Table className="**:border-dashed divide-x">
                    <TableHeader>
                        <TableRow className="divide-x">
                            <TableHead>‡∏Ñ‡∏≤‡∏ö</TableHead>
                            <TableHead>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</TableHead>
                        </TableRow>
                    </TableHeader>
                    <TableBody>
                        <TableRow className="divide-x">
                            <TableCell>‡πÄ‡∏Ç‡πâ‡∏≤‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</TableCell>
                            <TableCell>{today ? attendance.period[today.period[0]] : "‡πÑ‡∏°‡πà‡∏û‡∏ö"}</TableCell>
                        </TableRow>
                        <TableRow className="divide-x">
                            <TableCell>‡πÄ‡∏Ç‡πâ‡∏≤‡πÅ‡∏ñ‡∏ß</TableCell>
                            <TableCell>{today ? attendance.period[today.period[1]] : "‡πÑ‡∏°‡πà‡∏û‡∏ö"}</TableCell>
                        </TableRow>
                        {Array.from({ length: 8 }).map((_, i) => {
                            const period = today?.period[i + 2];
                            return (
                                <TableRow className="divide-x" key={i}>
                                    <TableCell>‡∏Ñ‡∏≤‡∏ö {i + 1}</TableCell>
                                    <TableCell>{period ? attendance.period[today.period[i + 2]] : "‡πÑ‡∏°‡πà‡∏û‡∏ö"}</TableCell>
                                </TableRow>
                            )
                        })}
                    </TableBody>
                </Table>
            </div>
            {leaves.length > 0 && (
                <div className="border-b border-dashed gap-8 text-sm p-8 grid sm:grid-cols-2 md:grid-cols-3">
                    {leaves.map((leave, i) => (
                        <div key={i} className="grid gap-2">
                            <p className="font-semibold">{leave.createdAt.toLocaleDateString("th-TH", {
                                day: "numeric",
                                month: "long",
                                year: "numeric"
                            })}
                                <Button variant="link" size="sm" asChild>‡∏•‡∏ö</Button>
                            </p>
                            <p className="text-muted-foreground">{leave.reason}</p>
                        </div>
                    ))}
                </div>
            )}
        </React.Fragment>
    )
}